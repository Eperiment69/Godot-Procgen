extends Node2D

const MAP_SIZE = Vector2(16, 16)
const ROOM_SIZE = Vector2(500, 500)
var dungeon_map = []  # 2D array to store the dungeon map
var mst_edges = []  # List to store the MST edges
var rooms: Array = []
var walls: Array = []
var Room_ = preload("res://Scenes/room.tscn")
var num_rooms = 50
var min_size = 8
var max_size = 14
var tile_size = 16
var min_area = 2000
var grid_size = 16
var grid = []


func _ready():
	# Generate rooms
	make_rooms()

	# Generate walls
	
	# Create MST
func make_rooms():

		for i in range(num_rooms):
			var pos = Vector2(0, 0)
			var r = Room_.instantiate()
			var w = min_size + randi() % (max_size - min_size)
			var h = min_size + randi() % (max_size - min_size)
			r.make_room(pos, Vector2(w, h) * tile_size)
			$Rooms.add_child(r)
		
		for room in $Rooms.get_children():
			print((room.size.x * room.size.y)/16)
		
		await  get_tree().create_timer(1.1).timeout
		
		for room in $Rooms.get_children():
			if (room.size.x * room.size.y)/16 <= min_area:
				room.queue_free()
			else:
				room.freeze
				
		# Create MST edges
		var visited = []
		for x in range(MAP_SIZE.x):
			visited.append([])
			for y in range(MAP_SIZE.y):
				visited[x].append(false)
		var queue = []
		queue.append(Vector2(0, 0))
		visited[0][0] = true
		
		while queue:
			var current = queue.pop_front()
			var neighbors = get_unvisited_neighbors(current, visited)
			if neighbors.size() > 0:
				var random_neighbor = neighbors[randi() % neighbors.size()]
				mst_edges.append([current, random_neighbor])
				visited[random_neighbor.x][random_neighbor.y] = true
				queue.append(random_neighbor)



func get_unvisited_neighbors(pos, visited):
	var neighbors = []
	var x = pos.x
	var y = pos.y

	if x > 0 and not visited[x - 1][y]:
		neighbors.append(Vector2(x - 1, y))
	if x < MAP_SIZE.x - 1 and not visited[x + 1][y]:
		neighbors.append(Vector2(x + 1, y))
	if y > 0 and not visited[x][y - 1]:
		neighbors.append(Vector2(x, y - 1))
	if y < MAP_SIZE.y - 1 and not visited[x][y + 1]:
		neighbors.append(Vector2(x, y + 1))
	
	return neighbors

	# Draw walls
	#for wall in walls:
		#draw_line(wall.start, wall.end)

func _input(event):
	if event.is_action_pressed('ui_select'):
		for n in $Rooms.get_children():
			n.queue_free()
		mst_edges.clear()
		make_rooms()

func _draw():
	# Draw rooms
	for room in $Rooms.get_children():
		draw_rect(Rect2(room.position - room.size, room.size*2),Color(32, 228, 0), false)
	
	for edge in mst_edges:
		var start = edge[0]
		var end = edge[1]
		draw_line(Vector2(start.x * ROOM_SIZE.x + ROOM_SIZE.x / 2, start.y * ROOM_SIZE.y + ROOM_SIZE.y / 2),Vector2(end.x * ROOM_SIZE.x + ROOM_SIZE.x / 2, end.y * ROOM_SIZE.y + ROOM_SIZE.y / 2), Color(1, 0, 0))

func _process(delta):
	queue_redraw()
